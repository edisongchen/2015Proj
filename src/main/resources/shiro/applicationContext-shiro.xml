<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"
	default-lazy-init="true">

	<description>Shiro Configuration</description>
	
	<!-- shiro的主过滤器,beanId 和web.xml中配置的filter name需要保持一致 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean" >
		<!-- 安全管理器 -->
		<property name="securityManager" ref="securityManager" />
		<!-- 默认的登陆访问url -->
		<property name="loginUrl" value="/login" />
		<!-- 登陆成功后跳转的url -->
		<property name="successUrl" value="/index" />
        <!-- 声明自定义的过滤器 -->
        <property name="filters">
            <map><!-- nameableFilter authc com.proj.common.security.FormAuthenticationFilter-->
                <entry key="authc" value-ref="formAuthenticationFilter"/>
                <entry key="ssl" value-ref="sslFilter"/>
            </map>
        </property>
		<!-- 访问地址的过滤规则,从上至下的优先级,如果有匹配的规则,就会返回,不会再进行匹配 -->
		<property name="filterChainDefinitions">
			<value>
				/static/** = anon
				/userfiles/** = anon
				/servlet/validateCodeServlet = anon
				/alarm/app/statistics = anon
				/cxf/** = anon
				/rs/** = anon
				/app/** = anon
				/websocket/** = anon
				/login = authc,ssl
				/logout = logout
			</value>
		</property>
		
	</bean>
	
	<bean id="sslFilter" class="org.apache.shiro.web.filter.authz.SslFilter">
		<property name="port" value="8443" />
	</bean>
	
	<!-- 权限管理器 -->
	<!-- Shiro's main business-tier object for web-enabled applications -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- 数据库认证的实现 com.proj.common.security.SysAuthorizaingRealm-->
		<property name="realm" ref="sysAuthorizaingRealm" />
		
		<!-- session 管理器 -->
        <property name="sessionManager" ref="sessionManager" />
		
		<!-- 缓存管理器 -->
        <property name="cacheManager" ref="shiroCacheManager" />
	</bean>
	
	<!-- session管理器 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- 会话超时时间，单位：毫秒 -->
        <property name="globalSessionTimeout" value="1800000" />

        <!-- 定时清理失效会话, 清理用户直接关闭浏览器造成的孤立会话 -->
        <property name="sessionValidationInterval" value="120000" />

        <!-- session存储的实现 -->
        <property name="sessionDAO" ref="shiroSessionDao" />

        <!-- sessionIdCookie的实现,用于重写覆盖容器默认的JSESSIONID -->
        <property name="sessionIdCookie" ref="sharesession" />

        <!-- 定时检查失效的session -->
        <property name="sessionValidationSchedulerEnabled" value="true" />
    </bean>

    <!-- sessionIdCookie的实现,用于重写覆盖容器默认的JSESSIONID -->
    <bean id="sharesession" class="org.apache.shiro.web.servlet.SimpleCookie">
        <!-- cookie的name,对应的默认是 JSESSIONID -->
        <constructor-arg name="name" value="SHAREJSESSIONID" />

        <!-- jsessionId的path为 / 用于多个系统共享jsessionId -->
        <property name="path" value="/" />
    </bean>

    <!-- session存储的实现 -->
    <bean id="shiroSessionDao" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO" />

    <!-- 用户授权信息Cache, 采用EhCache -->
    <bean id="shiroCacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManager" ref="cacheManager" /><!-- 参考applicationContext.xml中配置 -->
    </bean>

	<!-- 单机session
	<bean id="shiroCacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager" /> -->

	<!-- session 集群
	<bean id="shiroCacheManager" class="com.proj.common.security.shiro.ShiroRedisCacheManager"> 
		<property name="cached" ref="redisCached" /> 
	</bean>
	 -->
	 	 
	
	
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<!-- 起效权限注解,这个很少在web项目中用到,一般是控制url的访问,不是在controller中声明权限注解 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- AOP式方法级权限检查 -->
	<!-- 启用shiro为spring配置的bean注释，只运行在lifecycleBeanProcessor之后 -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />  
	</bean>

	<!-- 启用shrio授权注解拦截方式  -->
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>

</beans>