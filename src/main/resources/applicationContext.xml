<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"
        default-lazy-init="true">
	 <!-- Activates various annotations to be detected in bean classes(隐式地向 Spring 容器注册)eg:@Controller,@Autowired... -->
    <context:annotation-config />
    
    <!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入 -->
    <context:component-scan base-package="com.proj">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
        <context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice" />
    </context:component-scan>
    
    <!-- 定义aspectj -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    
	<!-- only for test -->
	<!-- <import resource="classpath*:test/test.xml" /> -->
	<!-- TODO ZK关闭，不然启动报错 -->
	<!-- <import resource="classpath:dubbo-demo-provider.xml" /> -->
	<!-- 读取jdbc.properties配置文件 -->
    <context:property-placeholder location="classpath:application.properties" />
    <!-- 基本bean 扫描路径 -->
	<context:component-scan base-package="com.proj" />
	<!-- 数据源配置,使用应用内的Tomcat JDBC连接池 -->
    <bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
        <!-- Connection Info -->
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />

        <!-- Connection Pooling Info -->
        <property name="initialSize" value="${jdbc.pool.initialSize}" />
        <property name="maxActive" value="${jdbc.pool.maxActive}" />
        <property name="maxIdle" value="${jdbc.pool.maxIdle}" />
        <property name="minIdle" value="${jdbc.pool.minIdle}" />
        <property name="maxWait" value="${jdbc.pool.maxWait}" />
        <property name="defaultAutoCommit" value="false" />
        
        <property name="validationQuery" value="select 1" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <!-- default value is false -->
        <property name="testOnReturn" value="false" />
        <!-- The default value is 30000 (30 seconds) -->
        <property name="validationInterval" value="180000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.pool.timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${jdbc.pool.minEvictableIdleTimeMillis}" />
    </bean>
	
	
	<!-- MyBatis配置 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 自动扫描entity目录, @Alias-->
        <property name="typeAliasesPackage" value="com.proj.entity" />
        <!-- 后期考虑baseEntity -->
        <!-- <property name="typeAliasesSuperType" value="com.actec.nms.accipiter.common.persistence.BaseEntity"/> -->
        <!-- 显式指定Mapper文件位置 -->
        <property name="mapperLocations" value="classpath:/mybatis/**/*.xml"/>
        <property name="configLocation" value="classpath:mybatis-config.xml" />
    </bean>
    <!-- 扫描basePackage下所有以@MyBatisRepository注解的接口-->
    <bean id="mapperScannerConfigurer"  class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 如果使 用了一个 以上的 DataSource ,那 么自动 装配可 能会失效 。使用 sqlSessionFactoryBeanName来设置正确的 bean名 称。 -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <property name="basePackage" value="com.proj" />
        <property name="annotationClass" value="com.proj.common.persistence.annotation.MyBatisRepository"/>
    </bean>
    
    <!-- 缓存配置 -->
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:${ehcache.configFile}" />
    </bean>
    
    <!-- import quartz -->
	<!-- <import resource="classpath*:task/quartz-task.xml" /> -->
	<!-- 扫描JsonRpcService 注解 -->
	<bean class="com.googlecode.jsonrpc4j.spring.AutoJsonRpcServiceExporter"/>
	
	<!-- 引入shiro config-->
	<import resource="classpath*:shiro/applicationContext-shiro.xml" />
</beans>